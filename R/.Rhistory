## 오름차순 변경
ggplot(data = mpg2, aes(x = reorder(drv, mean_hwy),
y = mean_hwy)) +
geom_col()
## 내림차순 변경
ggplot(data = mpg2, aes(x = reorder(drv, desc(mean_hwy)),
y = mean_hwy)) +
geom_col()
# geom_bar() 막대그래프
ggplot(data = mpg, aes(x = drv)) + geom_bar()
table(mpg$drv)
drv
mpg$drv
qplot(mpg$drv)
# 라인 그래프
economics = ggplot2::economics
View(economics)
ggplot(data = economics, aes(x = date, y = unemploy)) +
geom_line()
# 박스 플롯
ggplot(data = mpg, aes(x = drv, y = hwy)) +
geom_boxplot()
library(dplyr)
library(ggplot2)
# sav확장자 파일을 로드 하기위한 패키지 설치
install.packages(("foreign"))
install.packages("readxl")
library(foreign)
library(readxl)
# 한국복지패널 데이터 로드
raw_welfare = read.spss(file = "./csv/Koweps_hpc10_2015_beta1.sav",
to.data.frame = T)
View(raw_welfare)
dim(raw_welfare)
# 복사본 생성
wefare = raw_welfare
# 복사본 생성
welfare = raw_welfare
# 컬럼명 변경
welfare = rename(welfare, gender = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9,
code_region = h10_reg7)
# 성별에 따라서 월급의 차이가 과연 존재하는가?
table(welfare$gender)
## [성별] 1:남자, 2:여자, 9:무응답
qplot(welfare$gender)
## [성별] 1:남자, 2:여자, 9:무응답
## 9라는 데이터가 존재한다 생각하고 9라는 답은 결측치로 처리(실제론 없음)
welfare$gender = ifelse(welfare$gender == 9, NA, welfare$gender)
## 결측치 확인
table(is.na(welfare$gender))
## gender의 1은 male, 2는 female 변경
welfare$gender = ifelse(welfare$gender == 1, "male", "female")
table(welfare$gender)
## 월급이 0인 사람을 결측치 변경
## 월금이 9999인 사람도 결측치 변경(극단치
## income 컬럼의 이상치를 확인
## 월급이 0인 사람을 결측치 변경
## 월금이 9999인 사람도 결측치 변경(극단치)
welfare$income = ifelse(welfare$income == 0, NA,
ifelse(welfare$income == 9999, NA, welfare$income))
table(welfare$income)
table(is.na(welfare$income))
###case2
welfare$income = ifelse(welfare$income == 0 | welfare$income == 9999,
NA, welfare$income))
###case2
welfare$income = ifelse(welfare$income == 0 | welfare$income == 9999,
NA, welfare$income)
###case3
welfare$income = ifelse(welfare$income %>% c(0,9999),
NA, welfare$income)
###case3
welfare$income = ifelse(welfare$income %in% c(0,9999),
NA, welfare$income)
##결측치 확인
table(is.na(welfare$income))
gender_income = welfare %>%
filter(!is.na(income)) %>%
group_by(gender) %>%
summarise(mean_income = mean(income))
gender_income
ggplot(data = gender_income, aes(x=gender, y=mean_income)) +
geom_col()
# 나이별 월급이 어떤가 확인
## age 컬럼을 하나 생성
## birth을 기준으로 age컬럼을 하나 생성
## 월급, 나이의 결측치가 존재하면 삭제 계산
## 나이별 월급의 평균
## 시각화
View(welfare)
# 나이별 월급이 어떤가 확인
## birth을 기준으로 age컬럼을 하나 생성
## 월급, 나이의 결측치가 존재하면 삭제 계산
## 나이별 월급의 평균
## 시각화
welfare$birth
# 나이별 월급이 어떤가 확인
## birth을 기준으로 age컬럼을 하나 생성
## 월급, 나이의 결측치가 존재하면 삭제 계산
## 나이별 월급의 평균
## 시각화
welfare$age = 2023 - welfare$birth
welfare$age
table(is.na(welfare$age))
table(is.na(welfare$income))
age_income = welfare %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_age_income = mean(income))
age_income
ggplot(data = age_income, aes(x=age, y=mean_age_income)) +
geom_col()
## ageg -> 나이가 30세 미만 "young"
# 연령대 파생변수 생성
## ageg -> 나이가 30세 미만 "young"
## 30세 이상 - 60세 미만 "middle"
## 60세 이상 - "old"
welfare$ageg = ifelse(welfare_age < 30, "young",
ifelse(welfare_age < 60, "middle", "old"))
# 연령대 파생변수 생성
## ageg -> 나이가 30세 미만 "young"
## 30세 이상 - 60세 미만 "middle"
## 60세 이상 - "old"
welfare$ageg = ifelse(welfare$age < 30, "young",
ifelse(welfare_age < 60, "middle", "old"))
# 연령대 파생변수 생성
## ageg -> 나이가 30세 미만 "young"
## 30세 이상 - 60세 미만 "middle"
## 60세 이상 - "old"
welfare$ageg = ifelse(welfare$age < 30, "young",
ifelse(welfare$age < 60, "middle", "old"))
age_income_2 = welfare %>%
filter(!is.na(income)) %>%
group_by(ageg) %>%
summarise(mean_ageg_income = mean(income))
ggplot(data = age_income2, aes(x=ageg, y=mean_ageg_income)) +
ggplot(data = age_income2, aes(x=ageg, y=mean_ageg_income)) +
geom_col()
ggplot(data = age_income_2, aes(x=ageg, y=mean_ageg_income)) +
geom_col()
# 직업별로 월급의 평균이 차이가 나는가?
welfare$code_job
# 직업별로 월급의 평균이 차이가 나는가?
table(welfare$code_job)
# 직업별로 월급의 평균이 차이가 나는가?
table(is.na(welfare$code_job))
### 코드북 파일 로드
list_job = read_excel("./csv/Koweps_Codebook.xlsx",
sheet = 2,
col_names = T)
View(list_job)
### welfare 데이터프레임과 list_job 데이터프레임을 join()
### 두 데이터가 공통적으로 가지고 있는 컬럼의 이름 => code_job
### 결측치 제외하고 직업별 월급평균 구하고
### 상위 10개를 출력하고 시각화
reft_join(welfare, list_job, by="code_job")
### welfare 데이터프레임과 list_job 데이터프레임을 join()
### 두 데이터가 공통적으로 가지고 있는 컬럼의 이름 => code_job
### 결측치 제외하고 직업별 월급평균 구하고
### 상위 10개를 출력하고 시각화
left_join(welfare, list_job, by="code_job")
### welfare 데이터프레임과 list_job 데이터프레임을 join()
### 두 데이터가 공통적으로 가지고 있는 컬럼의 이름 => code_job
### 결측치 제외하고 직업별 월급평균 구하고
### 상위 10개를 출력하고 시각화
join_data = left_join(welfare, list_job, by="code_job")
View(join_data))
View(join_data)
table(join_data$job)
table(is.na(join_data$job))
table(is.na(join_data$income))
job_income = join_data %>%
filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(mean_income = mean(income))
View(join_data)
### 상위 10개만 출력
###월급을 기준으로 내림차순 정렬
###데이터의 시작부터 10개를 출력
job_income = job_income %>%
arrange(desc(mean_income)) %>%
head(10)
job_income
###시각화
ggplot(data=job_income, aes(x=job, y=mean_income)) +
geom_col()
ggplot(data=job_income, aes(x= reorder(job, -mean_income), y=mean_income)) +
geom_col()
###시각화(hbar로, 가로로)
ggplot(data=job_income, aes(x= reorder(job, -mean_income), y=mean_income)) +
geom_col() + coor_flip()
###시각화(hbar로, 가로로)
ggplot(data=job_income, aes(x= reorder(job, -mean_income), y=mean_income)) +
geom_col() + coord_flip()
# plotly 패키지 설치
install.packages("plotly")
library((plotly))
library(plotly)
plotly(top10)
library(plotly)
ggplotly(top10)
###시각화(hbar로, 가로로)
top10 = ggplot(data=job_income, aes(x= reorder(job, -mean_income), y=mean_income)) +
geom_col() + coord_flip()
ggplotly(top10)
View(mpg2)
economics = ggplot2::economics
library(xts)
eco = xts(economics$unemplot, order.by = economics$date)
library(xts)
## dygraghs -> 시계열 데이터를 시각화
install.packages("dygraphs")
library(dygraphs)
economics = ggplot2::economics
library(xts)
eco = xts(economics$unemploty, order.by = economics$date)
eco = xts(economics$unemploy, order.by = economics$date)
head(eco, 3)
dygraph(eco)
dygraph(eco) %>% dyRangeselector()
dygraph(eco) %>% dyRangeSelector()
install.packages("XML")
library(XML)
#접속 주소 변수
url <- "http://apis.data.go.kr/1160100/service/GetFnCoBasiInfoService/getFnCoOutl"
#서비스키
servicekey <- "dtbWOdJ%2FCz5HE0DGLU%2BCRPe7pOW0NIQBUcGEqsHZaTRiYCI%2F5%2BzugwzQjcvuId7NPdg6rUiW%2Bft3fm7yqyD4pw%3D%3D"
#접속 주소 변수
url <- "http://apis.data.go.kr/1160100/service/GetFnCoBasiInfoService/getFnCoOutl"
#서비스키
servicekey <- "dtbWOdJ%2FCz5HE0DGLU%2BCRPe7pOW0NIQBUcGEqsHZaTRiYCI%2F5%2BzugwzQjcvuId7NPdg6rUiW%2Bft3fm7yqyD4pw%3D%3D"
#페이지 넘버
pageno = 1
#페이지당 데이터의 개수
numofrows = 10
#데이터의 타입
type_data = "xml"
service_url = paste0(url,
"?sevicekey=", servicekey,
"&pageNo=", pageno,
"&numofRows=", numofrows,
"&resultType=", type_data)
service_url
xmlDocument = xmlTreeParse
xmlDocument = xmlTreeParse(service_url,
useInternalNodes = TRUE,
encoding = "UTF-8")
xmlDocument
xmlDocument
## xml root node 확인
rootnode = xmlRoot(xmlDocument)
rootnode
## 페이지당 데이터의 개수
rows = xpathSApply(rootnode, "//numofRows", xmlValue)
rows
## xml root node 확인
rootnode = xmlRoot(xmlDocument)
rootnode
## 페이지당 데이터의 개수
rows = xpathSApply(rootnode, "//numofRows", xmlValue)
rows
## 전체 데이터의 개수
total_rows = xpathSApply(rootnode, "//totalCount", xmlValue)
total_rows
R.Version()
R.version.string()
R.version.string
total_rows = as.numeric(total_rows)
loopcount = celling(total_rows/rows)
loopcount
loopcount = celling(total_rows/rows)
/getR
getR
check.for.updates.R()
updateR()
install.packages("XML")
library(XML)
library(XML)
#접속 주소 변수
url <- "http://apis.data.go.kr/1160100/service/GetFnCoBasiInfoService/getFnCoOutl"
#서비스키
servicekey <- "dtbWOdJ%2FCz5HE0DGLU%2BCRPe7pOW0NIQBUcGEqsHZaTRiYCI%2F5%2BzugwzQjcvuId7NPdg6rUiW%2Bft3fm7yqyD4pw%3D%3D"
#페이지 넘버
pageno = 1
#페이지당 데이터의 개수
numofrows = 10
#데이터의 타입
type_data = "xml"
service_url = paste0(url,
"?sevicekey=", servicekey,
"&pageNo=", pageno,
"&numofRows=", numofrows,
"&resultType=", type_data)
service_url
xmlDocument = xmlTreeParse(service_url,
useInternalNodes = TRUE,
encoding = "UTF-8")
xmlDocument
## xml root node 확인
rootnode = xmlRoot(xmlDocument)
rootnode
## 페이지당 데이터의 개수
rows = xpathSApply(rootnode, "//numofRows", xmlValue)
rows
## 전체 데이터의 개수
total_rows = xpathSApply(rootnode, "//totalCount", xmlValue)
total_rows
rows = as.numeric(rows)
total_rows = as.numeric(total_rows)
loopcount = celling(total_rows/rows)
loopcount
# openapi 사용
install.packages('XML')
library(XML)
#접속 주소 변수
url <- "http://apis.data.go.kr/1160100/service/GetFnCoBasiInfoService/getFnCoOutl"
#서비스키
servicekey <- "dtbWOdJ%2FCz5HE0DGLU%2BCRPe7pOW0NIQBUcGEqsHZaTRiYCI%2F5%2BzugwzQjcvuId7NPdg6rUiW%2Bft3fm7yqyD4pw%3D%3D"
# 페이지넘버
pageno = 1
# 페이지당 데이터의 개수
numofrows = 10
# 데이터의 타입
type_data = 'xml'
total_data = data.frame()
for(i in 1:2){
service_url = paste0(url,
'?serviceKey=', servicekey,
'&pageNO=', i,
'&numOfRows=', numofrows,
'&resultType=', type_data)
xmlDocument = xmlTreeParse(service_url,
useInternalNodes = TRUE,
encoding = 'UTF-8')
# rootnode 확인
rootnode = xmlRoot(xmlDocument)
# item 태그 안에 있는 값들을 호출
node = getNodeSet(rootnode, '//item')
# xml 데이터를 데이터프레임으로 변경
df_node = xmlToDataFrame(node)
# total_data 유니언 결합
total_data = rbind(total_data, df_node)
}
View(total_data)
xmlDocument
# xml root node 확인
rootnode = xmlRoot(xmlDocument)
rootnode
# 페이지당 데이터의 개수
rows = xpathSApply(rootnode, '//numOfRows', xmlValue)
rows
# 전체 데이터의 개수
total_rows = xpathSApply(rootnode, '//totalCount', xmlValue)
total_rows
# 반복 전체 데이터의 개수 / 페이지당 데이터의 개수 + 1
typeof(total_rows)
# 숫자의 형태로 변경 연산
rows = as.numeric(rows)
total_rows = as.numeric(total_rows)
loopcount = ceiling(total_rows/rows)
loopcount
install.packages("XML")
#접속 주소 변수
url <- "http://apis.data.go.kr/1160100/service/GetFnCoBasiInfoService/getFnCoOutl"
#서비스키
servicekey <- "dtbWOdJ%2FCz5HE0DGLU%2BCRPe7pOW0NIQBUcGEqsHZaTRiYCI%2F5%2BzugwzQjcvuId7NPdg6rUiW%2Bft3fm7yqyD4pw%3D%3D"
# 페이지넘버
pageno = 1
# 페이지당 데이터의 개수
numofrows = 10
# 데이터의 타입
type_data = 'xml'
total_data = data.frame()
for(i in 1:2){
service_url = paste0(url,
'?serviceKey=', servicekey,
'&pageNO=', i,
'&numOfRows=', numofrows,
'&resultType=', type_data)
xmlDocument = xmlTreeParse(service_url,
useInternalNodes = TRUE,
encoding = 'UTF-8')
# rootnode 확인
rootnode = xmlRoot(xmlDocument)
# item 태그 안에 있는 값들을 호출
node = getNodeSet(rootnode, '//item')
# xml 데이터를 데이터프레임으로 변경
df_node = xmlToDataFrame(node)
# total_data 유니언 결합
total_data = rbind(total_data, df_node)
}
View(total_data)
xmlDocument
# xml root node 확인
rootnode = xmlRoot(xmlDocument)
rootnode
# 페이지당 데이터의 개수
rows = xpathSApply(rootnode, '//numOfRows', xmlValue)
rows
# 전체 데이터의 개수
total_rows = xpathSApply(rootnode, '//totalCount', xmlValue)
total_rows
# 반복 전체 데이터의 개수 / 페이지당 데이터의 개수 + 1
typeof(total_rows)
# 숫자의 형태로 변경 연산
rows = as.numeric(rows)
total_rows = as.numeric(total_rows)
loopcount = ceiling(total_rows/rows)
loopcount
total_data = data.frame()
for(i in 1:2){
service_url = paste0(url,
'?serviceKey=', servicekey,
'&pageNO=', i,
'&numOfRows=', numofrows,
'&resultType=', type_data)
xmlDocument = xmlTreeParse(service_url,
useInternalNodes = TRUE,
encoding = 'UTF-8')
# rootnode 확인
rootnode = xmlRoot(xmlDocument)
# item 태그 안에 있는 값들을 호출
node = getNodeSet(rootnode, '//item')
# xml 데이터를 데이터프레임으로 변경
df_node = xmlToDataFrame(node)
# total_data 유니언 결합
total_data = rbind(total_data, df_node)
}
View(total_data)
write.csv(total_data, "금융.csv", row.names = F)
write.csv(total_data,
"금융.csv",
row.names = F,
fileEncoding = "cp949")
# 지도 시각화
# 패키지 설치
install.packages("ggirapgExtra")
library(ggiraphExtra)
library(dplyr)
library(ggplot2)
library(tibble)
install.packages("ggplot")
install.packages("dplyr")
library(ggiraphExtra)
# 지도 시각화
# 패키지 설치
install.packages("ggirapgExtra")
library(ggiraphExtra)
# 지도 시각화
# 패키지 설치
install.packages("ggiraphExtra")
library(ggiraphExtra)
library(ggiraphExtra)
library(dplyr)
library(ggplot2)
library(tibble)
# 미국 주 별 강력범죄율
View(USArrests)
# tibble 패키지에 있는 rownames_to_column 이용해
# 인덱스의 값은 컬럼으로 이름을 부여
crime = rownames_to_column(USArrests, var='state')
head(crime, 1)
# 소문자로 변경
crime$state = tolower(crime$state)
head(crime)
# map 데이터를 가지고 오기 위해서 패키지
install.packages('maps')
library(maps)
# 미국 맵 데이터를 변수에 지정
states_map = map_data('state')
head(states_map)
ggChoropleth(
data = crime,           # 지도에 표현할 데이터
aes(fill = Murder,      # 지도에 채울 데이터의 수치
map_id = state),    # 지역의 기준 변수
map = states_map,       # 지도 데이터
interactive = T         # 이걸 추가하면 여기가 어딘지, 수치가 얼만지 나옴
# 인터렉티브 여부
)
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
str(korpop1)
str(kormap1)
View(korpip1)
View(korpop1)
korpop1 = rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
ggChoropleth(
data = korpop1,
aes(fill = pop,
map_id = code,
tooltip = name),
map = kormap1,
interactive = T)
ggChoropleth(
data = korpop1,
aes(fill = pop,
map_id = code,
tooltip = name),
map = kormap1,
interactive = T)
View(map_data)
map_data
head(crime, 1)
states_map
